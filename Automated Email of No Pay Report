#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#Imports needed and initializing function
import sys
import time
import pandas as pd
import numpy as np
from tkinter import *
from hdbcli import dbapi
from datetime import datetime
from statistics import mean
from hdbcli import dbapi
import win32com.client as win32
import os


#Imports needed and initializing function
import sys
import time
import pandas as pd
import numpy as np
from tkinter import *
from hdbcli import dbapi
from datetime import datetime
from statistics import mean


#Setting up to conection to the sever
sys.path.append('C:\\Program Files\\sap\\hdbclient\\hdbuserstore')
    
conn = dbapi.connect(
                    address='vlpbid001.cokeonena.com',
                    port = '30015',
                    user = '********',
                    password = '*******')
 
cursor = conn.cursor()
 
MB_query = '''Select A.KUNNR as PAYER, BLART as DOCTYPE, A.NAME1 as PAYERNAME, A.Company,C.TC, C.STC, "CollectorCode",Collector, "CurrentTerms", XBLOCKED as "CreditBlock", BLOCK_REASON ,"OrderBlock",
sum(Amount) as "Invoice Amt", sum("Short Amount") as "Short Amount", count(A.BELNR), count (D.VBELN), sum("INDEX"), min("MinInvoice Date"), min("MinPayment Date"),  max ("MaxInvoice Date"), max("MaxPayment Date") 
from

((Select ADS.KUNNR, ADH.BLART, gsa.NAME1, ADS."BUKRS" Company, CASE ADS."SHKZG" WHEN 'S' Then ADS."DMBTR" ELSE -1*(ADS."DMBTR") END Amount, adh.belnr, ADS.AUGBL,
Case when ads.filkd <> '' then ads.filkd else ads.kunnr end as "Outlet",
CASE ADS.AUGDT WHEN '00000000' THEN 0 ELSE 1 END "INDEX",
CASE ADS.AUGDT WHEN '00000000' THEN '19990101' ELSE ADS.AUGDT end as "MaxPayment Date",
CASE ADS.AUGDT WHEN '00000000' THEN '20990101' ELSE ADS.AUGDT end as "MinPayment Date", 
CASE ADS.BSCHL WHEN '01' THEN ADH.BLDAT ELSE '20990101' End "MinInvoice Date",
CASE ADS.BSCHL WHEN '01' THEN ADH.BLDAT ELSE '19990101' End "MaxInvoice Date",
CC.BUSAB AS "CollectorCode",
GSA.ZTERM as "CurrentTerms"


FROM "_SYS_BIC"."cona-edw.accounts-receivable/S_CA_R_AccountingDocumentHeader"ADH,	
_SYS_BIC."cona-edw.accounts-receivable/S_CA_R_AccountingDocumentSegment" ADS,
"_SYS_BIC"."cona-mdm/S_CA_R_Customer_GeneralSalesArea" GSA,	
_SYS_BIC."cona-mdm/S_CA_R_Customer_CompanyCode" CC
where ADH.BUKRS = ADS.BUKRS	
AND ADH.BELNR = ADS.BELNR	
and CC."KUNNR" = ADS."KUNNR" 	
AND CC."BUKRS" = ADS."BUKRS"
and CC."KUNNR" = GSA."KUNNR"
and CC."BUKRS" = GSA."VKORG"
and ADS.HKONT='0115101000' 
and ads.bukrs in ('4200')
and ADH.BLART in ('RV')
)A



--need oldest invoice date for PK 01
-- add BS Group etc
-- and Field structure -
left join
(Select BUKRS, BUSAB, SNAME Collector from "_SYS_BIC"."cona-mdm/S_CA_R_Customer_AccountingClerkTexts" CT)B
on A."CollectorCode" = "BUSAB" and A.Company=BUKRS	

left join
(Select name1 as "OutletName", _SCL_EDI_OUT_PROID, _SCL_MNGBY, KATR6 as TC, KATR7 as STC, KUNNR, VKORG, AUFSD as "OrderBlock"  from "_SYS_BIC"."cona-mdm/S_CA_R_Customer_GeneralSalesArea" GSA)C
on A."Outlet" = C.KUNNR and A.Company=C.VKORG)

left join 
(Select belnr, vbeln, CASE ADS."SHKZG" WHEN 'S' Then ADS."DMBTR" ELSE -1*(ADS."DMBTR") END  "Short Amount" 
from _SYS_BIC."cona-edw.accounts-receivable/S_CA_R_AccountingDocumentSegment" ADS
where VBELN <>'')D
on A.BELNR=D.VBELN and A.AUGBL=D.BELNR

left join
(SELECT 
PARTNER AS "CM_Sold-To",
XBLOCKED, 
BLOCK_REASON 
FROM "_SYS_BIC"."cona-edw.accounts-receivable/S_CA_R_CreditManagement"
where BLOCK_REASON !=''
)
on "CM_Sold-To"=A.KUNNR


group by A."KUNNR", "BLART",NAME1,Company,  "TC", "STC", "CollectorCode", Collector, "CurrentTerms",XBLOCKED, BLOCK_REASON , "OrderBlock"
    '''
 
cursor.execute(MB_query)
result = cursor.fetchall()

#Putting the query into a dataframe for processing 
cols = [part[0] for part in cursor.description] 
df = pd.DataFrame(result,columns=cols)
print('Loading Query Done')

#Grabbing the date for use in emailing
b = datetime.today().strftime("%m-%d-%Y")
b = str(b)

#Clerk is an excel document lising all the collectors and their emails
#This list will be used to run through the dataframe and send customized emails to each collector
clerk = r'R:\AR\Audit/Acct Clerk.xlsx'
A = pd.read_excel(clerk, header = 0, dtype = {'Clerk Number':'str'})
count = 0



#Looping through to send each collector a personalized list of clients that didn't pay
for i in range(len(A)):
        DaEmail = A.loc[i, 'Email']
        name = A.loc[i,'Clerk Name']
        num = A.loc[i,'Clerk Number']#print(mail)
        
        t1 = df.loc[df['CollectorCode'] ==  num]
        if len(t1) > 0:
            t1.to_excel(r'R:/Team/James/Testing/No_Pay_'+name+'_'+b+'.xlsx',index=False)
            t2 = r'R:/Team/James/Testing/No_Pay_'+name+'_'+b+'.xlsx'
            outlook = win32.Dispatch('outlook.application')
            mail = outlook.CreateItem(0)
            mail.To = DaEmail
            mail.Attachments.Add(Source=t2) 
            mail.Subject  = 'No Pay Report'
            mail.Body = ('This is an automated message generated by the creation of No-Pay report for '+name+' on the date of '+b+ '.')
            #mail.send
            mail.Display(True)
            count = count+1
            
print('Number of Collector Emails sent: '+count+'')

#Collectors that no longer work for the company, but are assigned to various companies. 
#These will be sent to management to be recified 
new = df['CollectorCode'].isin(['51','29','18','15',''])
NoCollector = df[new]

#Collectors that have unusual circumstances, these will be sent in a seperate email to managment 
new2 = df['CollectorCode'].isin(['41','42','99','28','23','50'])
Misc = df[new2]

if len(NoCollector) > 0:
    NoCollector.to_excel(r'R:/Team/James/Testing/No_Pay_Marlin_'+b+'.xlsx',index=False)
    t4 = r'R:/Team/James/Testing/No_Pay_Marlin_'+b+'.xlsx'
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.To = 'CollectionManager@gmail.com'
    mail.Attachments.Add(Source=t4) 
    mail.Subject  = 'No Pay Report'
    mail.Body = ('This is an automated message generated by the creation of No-Pay report for Marlin on the date of '+b+ '. The attached excel file is a list of all accounts without an associated collector or a collector that no longer works at Coke consolidated.' )
    #mail.send
    mail.Display(True)
    print("Marline no collector email sent")

if len(Misc) > 0:
    Misc.to_excel(r'R:/Team/James/Testing/No_Pay_Third_Party_Bankrupt_Uncollectable_'+b+'.xlsx',index=False)
    t5 = r'R:/Team/James/Testing/No_Pay_Third_Party_Bankrupt_Uncollectable_'+b+'.xlsx'
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.To = ('Managment@gmail.com;Manager1@gmail.com;Manager2@gmail.com')
    mail.Attachments.Add(Source=t5) 
    mail.Subject  = 'No Pay Report'
    mail.Body = ('This is an automated message generated by the creation of No-Pay report on the date of '+b+ '. The attached excel file is all no pay accounts categorized as uncollectable or bankrupt, as well as those assigned to third party collectors.')
    #mail.send
    mail.Display(True)
    print('Third Party and Uncollectable Email sent')

